[tool.poetry]
name = "grygry"
version = "2.6.1"
description = "Command line utility to grep different types of source code."
license = "MIT"
authors = ["Jerome Dumonteil <jerome.dumonteil@gmail.com>"]
keywords = ["code", "source", "grep"]
homepage = "https://github.com/jdum/grygry"
repository = "https://github.com/jdum/grygry"
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Topic :: Text Processing",
    "Topic :: Software Development",
]
packages = [{ include = "grygry" }]

[tool.poetry.scripts]
grygry_functions = "grygry.grycli:grygry_functions"
gryall = "grygry.grycli:gryall"
gryall00 = "grygry.grycli:gryall00"
grypy = "grygry.grycli:grypy"
grypy00 = "grygry.grycli:grypy00"
grypyt = "grygry.grycli:grypyt"
grypyt00 = "grygry.grycli:grypyt00"
grypy0 = "grygry.grycli:grypy0"
grypy2 = "grygry.grycli:grypy2"
grynopy = "grygry.grycli:grynopy"
grynopy00 = "grygry.grycli:grynopy00"
grymd = "grygry.grycli:grymd"
grymd00 = "grygry.grycli:grymd00"
grytxt = "grygry.grycli:grytxt"
grytxt00 = "grygry.grycli:grytxt00"
grycfg = "grygry.grycli:grycfg"
grycfg00 = "grygry.grycli:grycfg00"
gryrb = "grygry.grycli:gryrb"
gryrb00 = "grygry.grycli:gryrb00"
gryrb0 = "grygry.grycli:gryrb0"
gryjs = "grygry.grycli:gryjs"
gryjs00 = "grygry.grycli:gryjs00"
grycss = "grygry.grycli:grycss"
grycss00 = "grygry.grycli:grycss00"
gryjson = "grygry.grycli:gryjson"
gryjson00 = "grygry.grycli:gryjson00"
grytoml = "grygry.grycli:grytoml"
grytoml00 = "grygry.grycli:grytoml00"
gryhtml = "grygry.grycli:gryhtml"
gryhtml00 = "grygry.grycli:gryhtml00"
gryhtmlall = "grygry.grycli:gryhtmlall"
gryhtmlall00 = "grygry.grycli:gryhtmlall00"
gryyml = "grygry.grycli:gryyml"
gryyml00 = "grygry.grycli:gryyml00"
grysh = "grygry.grycli:grysh"
grysh00 = "grygry.grycli:grysh00"

[tool.poetry.dependencies]
python = ">=3.10,<4.0"

[tool.poetry.group.dev.dependencies]
poetry = ">=1.8"
pytest = ">=7.0"
pytest-cov = ">=4.0.0"
tox = "^4"
ruff = ">=0.7.1"
isort = ">=5.12.0"
coverage = ">=7.0"

[build-system]
requires = ["poetry-core>=1.8.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ["py312"]

[tool.isort]
profile = "black"

[tool.ruff]
target-version = "py313"
line-length = 88
fix = true
lint.select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E",
    "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
lint.ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
    # Use specific rule codes when ignoring type issues
    "PGH003",
    # check for execution of untrusted input
    "S603",
    # Class attribute `open` is shadowing a Python builtin
    "A003",
    # Use `X | Y` in `isinstance` call instead of `(X, Y)`
    "UP038",
    # Avoid specifying long messages outside the exception class
    "TRY003",
    # Use ternary operator
    "SIM108",
    # Use of `assert` detected
    "S101",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "RUF005"]

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["grygry"]
